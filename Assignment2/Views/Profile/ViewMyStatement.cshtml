@using X.PagedList
@using X.PagedList.Mvc.Core
@using X.PagedList.Mvc.Core.Common
@using Assignment2.ViewModels
@model ViewMyStatementVM

@{
    ViewData["Title"] = "My Statement";
    var customer = (Customer)ViewBag.Customer;
}
@functions{
    public string RenderTimeLocale(DateTime dateTime)
    {
        var datePatt = "dd/MM/yyyy hh:mm tt";
        return dateTime.ToLocalTime().ToString(datePatt);
    }
}

<script>
    function callChangefunc(val) {
        window.location.href = "/Profile/ViewMyStatement?accountType=" + val;
    }
</script>

<h1>@ViewData["Title"]</h1>

<div class="col-md-10">
    <h6>Choose your account type: </h6>

    @Html.DropDownListFor(m => m.SelectedAccountType, Model.AccountTypesSelectList,
                     new
                     {
                         @onchange = "callChangefunc(this.value)"
                     })

    <br />
    <br />
    <h3>Current Balance of the Account/s with type of @Model.SelectedAccountType</h3>
    <table class="table">
        <tr>
            <th>@Html.DisplayNameFor(x => x.Accounts[0].AccountNumber)</th>
            <th>Current Balance</th>
        </tr>
        @foreach (var acc in Model.Accounts)
        {
            <tr>
                <th>@Html.DisplayFor(x => acc.AccountNumber)</th>
                <td>@Html.DisplayFor(x => acc.Balance)</td>
            </tr>
        }
    </table>

    <br />
    <br />
</div>

<div>
    <h3>Transactions of the accounts with type of @Model.SelectedAccountType</h3>
    <table class="table">
        <tr>
            <th>@Html.DisplayNameFor(x => x.PagedListTransactions[0].TransactionID)</th>
            <th>From Account Number</th>
            <th>To Number</th>
            <th>@Html.DisplayNameFor(x => x.PagedListTransactions[0].Amount)</th>
            <th>@Html.DisplayNameFor(x => x.PagedListTransactions[0].TransactionType)</th>
            <th>Local TransactionTime</th>
            <th>@Html.DisplayNameFor(x => x.PagedListTransactions[0].Comment)</th>
        </tr>
        @foreach (var trans in Model.PagedListTransactions)
        {
    <tr>
        <td>@Html.DisplayFor(x => trans.TransactionID)</td>
        <td>@Html.DisplayFor(x => trans.AccountNumber)</td>
        <td>@Html.DisplayFor(x => trans.DestinationAccountNumber)</td>
        <td>@Html.DisplayFor(x => trans.Amount)</td>
        <td>@Html.DisplayFor(x => trans.TransactionType)</td>
        <td>@RenderTimeLocale(trans.TransactionTimeUtc)</td>
        <td>@Html.DisplayFor(x => trans.Comment)</td>
    </tr>
        }
    </table>

    @Html.PagedListPager(Model.PagedListTransactions, page => Url.Action("ViewMyStatement", new { page, accountType = Model.SelectedAccountType }),
            new PagedListRenderOptions
            {
                LiElementClasses = new[] { "page-item" },
                PageClasses = new[] { "page-link" }
            })
</div>
